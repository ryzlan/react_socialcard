{"version":3,"sources":["component/FilteredList.js","component/InputQuery.js","component/Card.js","component/CardWrapper.js","App.js","serviceWorker.js","index.js"],"names":["FilteredList","state","_this2","this","react_default","a","createElement","props","items","slice","map","d","index","key","onClick","selectOption","Component","InputQuery","query","filtered","handleSubmit","e","preventDefault","_this","handleQuery","setState","handleChange","_e$target","target","name","value","Object","defineProperty","newList","breeds","filter","item","lc","toLowerCase","includes","nextProps","onSubmit","className","type","placeholder","onChange","component_FilteredList","Card","src","img","alt","CardWrapper","component_Card","App","isloaded","error","error_obj","performSearch","arguments","length","undefined","fetch","concat","then","res","json","result","status","message","keys","renderContent","code","component_CardWrapper","_this$state","component_InputQuery","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a920f2a2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass FilteredList extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (\r\n            <ul>\r\n            {this.props.items.slice(0, 5).map((d,index)=>{\r\n                return(<li key={index} onClick={()=>{this.props.selectOption(d)}} >{d}</li>)\r\n            })}\r\n            <li>and many more...</li>\r\n            </ul>\r\n          );\r\n    }\r\n}\r\n \r\nexport default FilteredList;","import React, { Component } from 'react';\r\n\r\nimport FilteredList from './FilteredList';\r\n\r\nclass InputQuery extends Component {\r\n    state = { \r\n        query:\"\",\r\n        filtered:[]\r\n     }\r\n     componentDidMount() {\r\n        this.setState({\r\n          filtered: this.props.breeds\r\n        });\r\n      }\r\n      \r\n      componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n          filtered: nextProps.breeds\r\n        });\r\n      }\r\n\r\n\r\nhandleSubmit=(e)=>{\r\ne.preventDefault();\r\nthis.props.handleQuery(this.state.query);\r\n\r\nthis.setState({\r\n    query:''\r\n})\r\n}\r\n\r\nhandleChange=(e)=>{\r\n    let {name, value} = e.target;\r\n    this.setState({\r\n        [name]:value\r\n    });\r\n\r\n    let currentList = [];\r\n    let newList = [];\r\n    if (e.target.value !== \"\") {\r\n      currentList = this.props.breeds;\r\n      newList = currentList.filter(item => {\r\n        const lc = item.toLowerCase();\r\n        const filter = e.target.value.toLowerCase();\r\n        return lc.includes(filter);\r\n      });\r\n    } else {\r\n            // If the search bar is empty, set newList to original task list\r\n      newList = [];\r\n    }\r\n        \r\n    this.setState({\r\n      filtered: newList\r\n    });\r\n  }\r\n  selectOption=(query)=>{\r\n      this.setState({\r\n          query:query\r\n      });\r\n      this.props.selectOption(query)\r\n  }\r\n\r\n    render() {\r\n        return (<form onSubmit={this.handleSubmit}>\r\n            <input className=\"search__input\"\r\n            type=\"text\" \r\n            placeholder=\"Search for a Doggo breed ...\"\r\n            name=\"query\"\r\n            onChange={this.handleChange}\r\n            value={this.state.query}\r\n            />\r\n            <FilteredList items={this.state.filtered}  \r\n            selectOption ={this.selectOption}/>\r\n        </form>);\r\n    }\r\n}\r\n \r\nexport default InputQuery;","import React, { Component } from 'react';\r\nclass Card extends Component {\r\n    state = {  }\r\n    render() { \r\n        //console.log(this.props.img);\r\n        \r\n        return ( <div className=\"card\">\r\n        <img src={this.props.img} alt=\"chow\" />\r\n        </div> );\r\n    }\r\n}\r\n \r\nexport default Card;","import React, { Component } from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nclass CardWrapper extends Component {\r\n    state = {  }\r\n   \r\n    render() { \r\n        return (<div className=\"card-wrapper\">\r\n        \r\n            {this.props.items.map((img, index)=>(\r\n                <Card key={index} img={img} />\r\n            ))}\r\n        </div> );\r\n    }\r\n}\r\n \r\nexport default CardWrapper;","import React, { Component } from 'react';\n\n\nimport InputQuery from './component/InputQuery';\nimport CardWrapper from './component/CardWrapper';\n\nclass App extends Component {\n  state={\n    isloaded:false,\n    items:[],\n    breeds:[],\n    error:false,\n    error_obj:null,\n    query:'husky'\n  }\ncomponentDidMount(){\n this.performSearch() ;\n\n}\n\nperformSearch=(query = this.state.query)=>{\n  this.setState({\n    query:query,\n    isloaded:true\n  })\n  \n  fetch(`https://dog.ceo/api/breed/${query}/images/random/9`)\n  .then(res=> res.json())\n  .then((result)=>{\n   \n\n    if(result.status === 'error'){\n      this.setState({\n        isloaded:true,\n        error:true,\n        error_obj:result\n      })\n    }\n    if(result.status === 'success'){\n      this.setState({\n        isloaded:true,\n        items:result.message,\n        error:false\n      })\n    }\n    \n  })\n  fetch(`https://dog.ceo/api/breeds/list/all`)\n  .then(res=> res.json())\n  .then((result)=>{\n    if(result.status === 'error'){\n      \n      this.setState({\n        isloaded:true,\n        error:true,\n        error_obj:result\n      })\n    }\n    if(result.status === 'success'){\n      this.setState({\n        isloaded:true,\n        breeds:Object.keys(result.message),\n        error:false\n      })\n    }\n    \n  })\n}\n\nselectOption=(query)=>{\n  this.setState({\n      query:query\n  });\n  this.performSearch(query)\n\n}\n\n\nrenderContent=(error, isloaded ,items)=>{\n  if(error){\n    return <h1>AN Error Occured :{this.state.error_obj.message} <span>{this.state.error_obj.code}</span> </h1>\n  }else if(!isloaded){\n   return <h1>Loading... </h1>\n  }\n  else{\n       return  <CardWrapper items={this.state.items} />    \n  }\n}\n\nrender() {\n    const {error, isloaded , items }= this.state;\n        return (\n            <div className=\"container\">\n            <h2>A React App to search dog breeds</h2>\n            <div className=\"search__container\">\n            <InputQuery \n              handleQuery={this.performSearch}\n              breeds={this.state.breeds}\n              selectOption ={this.selectOption}\n              />\n            </div>\n            <h1>Searched for:  {this.state.query}</h1>\n            {this.renderContent(error,isloaded,items)}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}